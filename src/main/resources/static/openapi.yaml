openapi: 3.0.0
info:
  title: Software engineer challenge overview
  version: 1.0.0

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer

security:
  - BearerAuth:
      - read
      - write

paths:
  /api/user/authenticate:
    post:
      tags:
        - User
      operationId: authenticateUser
      summary: Authenticate User
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
              example:
                username: "alex.miller"
                password: "!picPAY@2021"
              required:
                - username
                - password
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                example:
                  accessToken: "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhbGV4Lm1pbGxlciIsImV4cCI6MTYxNzc0ODI4NCwiaWF0IjoxNjE3NzMwMjg0fQ.M6MrqD2kysXoFQB1zb1kt7Y3OzcAyyx8iFhu8zsJQJTg5sU0uKaASaOV6475NXsZ-DbfQr0fvGc1IOrLxOxjpA"
        '401':
          description: Invalid username or password
        '400':
          description: Invalid fields

  /api/user:
    get:
      tags:
        - User
      security:
        - BearerAuth: [ read ]
      parameters:
        - in: query
          name: keyword
          required: true
          schema:
            type: string
        - in: query
          name: page
          required: true
          schema:
            type: integer
      operationId: searchUserByKeyword
      summary: Search user by keyword
      responses:
        '200':
          description: Users found by keyword
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    uuid:
                      type: string
                    name:
                      type: string
                    username:
                      type: string
                    relevanceLevel:
                      type: integer
                  example:
                    uuid: "fba0be35-7111-43c5-8111-b326360da4d0"
                    name: "Diether Bein"
                    username: "diether.bein"
                    relevanceLevel: 2
        '400':
          description: Invalid fields
        '401':
          description: Unauthorized

servers:
  - url: 'http://localhost:8080/'
