plugins {
    id 'org.springframework.boot' version '2.4.3'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'jacoco'
}

group = 'com.picpay'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    compile 'org.springframework.boot:spring-boot-starter-data-mongodb'

    compile 'org.springframework.boot:spring-boot-starter-data-rest'
    compile 'org.springframework.boot:spring-boot-starter-security'
    compile 'org.springframework.boot:spring-boot-starter-data-redis'
    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'io.springfox:springfox-boot-starter:3.0.0'
    compile 'io.springfox:springfox-swagger-ui:2.9.2'
    compile group: 'javax.validation', name: 'validation-api', version: '2.0.1.Final'
    compile group: 'org.hibernate', name: 'hibernate-validator', version: '6.1.5.Final'
    compile group: 'commons-lang', name: 'commons-lang', version: '2.6'
    compile 'io.jsonwebtoken:jjwt:0.9.1'
    compile group: 'javax.xml.bind', name: 'jaxb-api', version: '2.2.4'
    compile 'br.com.six2six:fixture-factory:3.1.0'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

test {
    useJUnitPlatform()
}

build.dependsOn jacocoTestReport

jacocoTestReport {
    group = "Reporting"
    reports {
        xml.enabled true
        csv.enabled false
        html.destination file("${buildDir}/jacocoHtml")
    }
    afterEvaluate {
        getClassDirectories().setFrom(classDirectories.files.collect {
            fileTree(
                    dir: it,
                    exclude: [
                            '**/domain/**',
                            '**/exceptions/**',
                            '**/repositories/**',
                            '**/utils/**',
                            '**/configs/**',
                            '**/controller/response/**',
                            '**/controller/request/**'
                    ]
            )
        })
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'CLASS'
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 1.0
            }
            excludes = [
                    'com.picpay.softwareengineerchallenge.configs.*',
                    'com.picpay.softwareengineerchallenge.controller.request.*',
                    'com.picpay.softwareengineerchallenge.controller.response.*',
                    'com.picpay.softwareengineerchallenge.domain.*',
                    'com.picpay.softwareengineerchallenge.exceptions.*',
                    'com.picpay.softwareengineerchallenge.repositories.*',
                    'com.picpay.softwareengineerchallenge.utils.*',
                    'com.picpay.softwareengineerchallenge.SoftwareEngineerChallengeApplication'
            ]
        }
    }
}

check.dependsOn jacocoTestCoverageVerification